plugins {
  id 'com.android.library'
  id 'kotlin-android'
  id 'kotlin-kapt'
}

if (file('../enc.properties').exists()) {
  apply from: '../enc.properties'
}

android {
  flavorDimensions 'api'
  productFlavors {
    mock {
      dimension 'api'

      buildConfigField "String", "API_KEY", "\"DEMO_KEY\""
    }
    live {
      dimension 'api'

      buildConfigField "String", "API_KEY", project.properties['api_key']
    }
  }

  buildTypes {
    debug {
    }

    release {
      postprocessing {
        proguardFiles 'proguard-rules.pro'
        consumerProguardFiles 'consumer-rules.pro'
        removeUnusedResources = false
        removeUnusedCode = true
        optimizeCode = true
        obfuscate = true
      }
    }
  }
}

dependencies {
  implementation deps.kotlin.stdlib
  implementation deps.kotlin.coroutine.core
  implementation deps.kotlin.coroutine.android

  implementation deps.google.dagger.hilt.android
  kapt deps.google.dagger.hilt.compiler

  implementation deps.square.okhttp.core
  implementation deps.square.okhttp.logging
  mockImplementation deps.square.okhttp.mockwebserver
  implementation deps.square.moshi.core
  kapt deps.square.moshi.codegen
  api deps.square.retrofit.core
  api deps.square.retrofit.converter_moshi

  implementation deps.timber

  testImplementation deps.google.truth
  testImplementation deps.junit
  testImplementation deps.square.okhttp.mockwebserver
  testImplementation deps.kotlin.test
  testImplementation deps.kotlin.coroutine.test
}

// NOTES#11/03/2021
tasks.withType(Test) {
  configurations {
    jvmArgs += [
      '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
    ]
  }
}